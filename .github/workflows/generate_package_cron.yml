name: Generate Packages (Cron)

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main

jobs:
  add-cron-message:
    permissions: write-all
    name: Add Cron Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Add Cron Message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
            gh release view --json body --jq '.body' > notes.txt
            echo "---" >> notes.txt
            echo "## Cron update $(date '+%Y-%m-%d %H:%M')" >> notes.txt
            echo "" >> notes.txt
            gh release edit "$tag_name" --notes-file notes.txt

  generate-packages:
    permissions: write-all
    name: Generate Packages
    runs-on: ubuntu-latest
    needs: add-cron-message
    steps:
      - uses: actions/checkout@v3

      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u '+%Y%m%d%H%M')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache paq build
        id: cache-paq
        uses: actions/cache@v4
        with:
          path: /tmp/cache-paq
          key: ${{ runner.os }}-paq-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-paq-${{ steps.get-date.outputs.date }}
            ${{ runner.os }}-paq-
            ${{ runner.os }}-paq

      - name: Cache darling build
        id: cache-darling
        uses: actions/cache@v4
        with:
          path: /tmp/cache-darling
          key: ${{ runner.os }}-darling-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-darling-${{ steps.get-date.outputs.date }}
            ${{ runner.os }}-darling-
            ${{ runner.os }}-darling

      - name: create path paq
        run: mkdir -p /tmp/cache-paq

      - name: create path darling
        run: mkdir -p /tmp/cache-darling

      - name: Generate Packages
        run: .github/workflows/generate_packages.sh

      - name: Upload zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          for file in /tmp/packages/*.zip; do
            gh release upload "$tag_name" "$file" --clobber
          done

      - name: Add failed package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f /tmp/packages-failed.log ]]; then
            tag_name=$(gh release view --json name --jq '.name')
            gh release view --json body --jq '.body' > notes.txt
            echo "---" >> notes.txt
            cat /tmp/packages-failed.log >> notes.txt
            gh release edit "$tag_name" --notes-file notes.txt
          fi

  generate-metas:
    permissions: write-all
    name: Generate Metas
    runs-on: ubuntu-latest
    needs: generate-packages
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      - name: Install deps
        run: pip install -r ./.github/workflows/requirements_generate_metadata.txt

      - name: Generate Metas
        run: python .github/workflows/generate_metadata.py

      - name: Upload meta
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          gh release upload "$tag_name" "/tmp/paq-packages.toml" --clobber

      - name: Add failed package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f /tmp/paq-packages.log ]] && [[ "$(cat /tmp/paq-packages.log)" != "" ]]; then
            tag_name=$(gh release view --json name --jq '.name')
            gh release view --json body --jq '.body' > notes.txt
            echo "---" >> notes.txt
            cat /tmp/paq-packages.log >> notes.txt
            gh release edit "$tag_name" --notes-file notes.txt
          fi
