name: Generate Packages

on:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main

jobs:
  starting-job:
    permissions: write-all
    name: Add Cron Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add Cron Message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          gh release view --json body --jq '.body' > notes.txt
          echo "---" >> notes.txt
          echo "###### Starting Job $(date '+%Y-%m-%d %H:%M')" >> notes.txt
          gh release edit "$tag_name" --notes-file notes.txt

  generate-package-paq:
    permissions: write-all
    name: Generate Packages Paq
    runs-on: ubuntu-latest
    outputs:
      failed: ${{ steps.failed.outputs.failed }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate Package
        run: .github/workflows/generate_package.sh "./packages/paq"

      - name: Upload zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          for file in /tmp/packages/*.zip; do
            gh release upload "$tag_name" "$file" --clobber
          done

  generate-package-alacritty:
    permissions: write-all
    name: Generate Packages Alacritty
    runs-on: ubuntu-latest
    outputs:
      failed: ${{ steps.failed.outputs.failed }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate Package
        run: .github/workflows/generate_package.sh "./packages/alacritty"

      - name: Upload zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          for file in /tmp/packages/*.zip; do
            gh release upload "$tag_name" "$file" --clobber
          done

  generate-packages-1:
    permissions: write-all
    name: Generate Packages 1
    outputs:
      failed: ${{ steps.failed.outputs.failed }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Package
        run: .github/workflows/generate_packages.sh "./packages/paq" "./packages/alacritty" "./packages/flashbacktothefuture" "./packages/ollama"

      - name: Upload zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          for file in /tmp/packages/*.zip; do
            gh release upload "$tag_name" "$file" --clobber
          done

  generate-packages-2:
    permissions: write-all
    name: Generate Packages 2
    outputs:
      failed: ${{ steps.failed.outputs.failed }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Package FlashBackToTheFuture
        run: .github/workflows/generate_package.sh "./packages/flashbacktothefuture"

      - name: Generate Package Ollama
        run: .github/workflows/generate_package.sh "./packages/ollama"

      - name: Upload zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          for file in /tmp/packages/*.zip; do
            gh release upload "$tag_name" "$file" --clobber
          done

  generate-metas:
    permissions: write-all
    name: Generate Metas
    runs-on: ubuntu-latest
    needs: [generate-package-paq, generate-packages-1, generate-packages-2, generate-package-alacritty]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -r ./.github/workflows/requirements_generate_metadata.txt

      - name: Generate Metas
        run: python .github/workflows/generate_metadata.py

      - name: Upload meta
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          gh release upload "$tag_name" "/tmp/paq-packages.toml" --clobber

  ending-job:
    permissions: write-all
    name: Add Cron Message
    runs-on: ubuntu-latest
    needs: [generate-metas, starting-job]
    steps:
      - uses: actions/checkout@v4

      - name: Add Cron Message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json name --jq '.name')
          gh release view --json body --jq '.body' > notes.txt
          echo "###### Ending Job $(date '+%Y-%m-%d %H:%M')" >> notes.txt
          gh release edit "$tag_name" --notes-file notes.txt
